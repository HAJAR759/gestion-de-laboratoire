pipeline {
    agent any

    environment {
        // Variables pour SonarQube
        SONAR_HOST_URL = 'http://localhost:9000'
        SONAR_TOKEN = credentials('sonar-token')  // SonarQube token, à configurer dans Jenkins
        DOCKER_IMAGE = 'adresse-service:latest'
    }

    stages {
        stage('Checkout') {
            steps {
                // Récupère le code source
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                script {
                    // Compilation et exécution des tests unitaires (Junit, Mockito)
                    bat 'mvnw.cmd clean install -DskipTests=false'  // Maven wrapper pour Windows
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Analyser le code avec SonarQube
                    bat """
                    mvnw.cmd sonar:sonar ^
                        -Dsonar.projectKey=adresse-service ^
                        -Dsonar.host.url=%SONAR_HOST_URL% ^
                        -Dsonar.login=%SONAR_TOKEN%
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Créer l'image Docker
                    bat 'docker build -t %DOCKER_IMAGE% .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Pousser l'image Docker dans votre registre
                    bat 'docker push %DOCKER_IMAGE%'
                }
            }
        }

        stage('Deploy') {
            steps {
                // Stage de déploiement (ajustez en fonction de vos besoins)
                echo 'Deployment stage (optional)'
            }
        }
    }

    post {
        always {
            cleanWs()  // Nettoie l'espace de travail après chaque exécution
        }
    }
}
